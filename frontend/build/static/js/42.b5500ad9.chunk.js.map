{"version":3,"file":"static/js/42.b5500ad9.chunk.js","mappings":"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","sources":["pages/LivePage.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport \"webrtc-adapter\";\r\nimport { FaPlay, FaStop, FaVideo } from \"react-icons/fa\";\r\n\r\nconst JanusRtmpStreamer = () => {\r\n  const [streaming, setStreaming] = useState(false);\r\n  const [connected, setConnected] = useState(false);\r\n  const localVideoRef = useRef(null);\r\n  const socket = useConnectSocket(user);\r\n  const [isSocketConnected, setIsSocketConnected] = useState(false);\r\n  const mediaStream = useRef(null); // Hold media stream reference\r\n\r\n  const ws = new WebSocket(\"ws://167.99.44.195:8188\"); // WebSocket URL of your Janus server\r\n\r\n  ws.onopen = () => {\r\n    console.log(\"Connected to Janus WebSocket server\");\r\n    // Send a message to Janus to initialize\r\n    socket.send(\r\n      JSON.stringify({ janus: \"attach\", plugin: \"janus.plugin.rtmp\" })\r\n    );\r\n  };\r\n\r\n  ws.onmessage = (event) => {\r\n    const data = JSON.parse(event.data);\r\n    console.log(\"Received message from Janus:\", data);\r\n    // Handle the Janus responses (such as connection success, etc.)\r\n  };\r\n\r\n  ws.onerror = (error) => {\r\n    console.error(\"WebSocket error:\", error);\r\n  };\r\n\r\n  ws.onclose = () => {\r\n    console.log(\"WebSocket connection closed\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Setup socket connection\r\n    if (socket) {\r\n      setIsSocketConnected(socket.connected);\r\n      socket.on(\"connect\", () => setIsSocketConnected(true));\r\n      socket.on(\"disconnect\", () => setIsSocketConnected(false));\r\n\r\n      socket.on(\"stream-started\", (response) => {\r\n        console.log(\"Streaming started:\", response);\r\n        startStreamingToJanus(); // Begin media streaming to Janus\r\n      });\r\n\r\n      socket.on(\"stream-stopped\", () => {\r\n        console.log(\"Streaming stopped\");\r\n        setStreaming(false);\r\n      });\r\n\r\n      socket.on(\"error\", (message) => {\r\n        console.error(\"Socket.IO error:\", message);\r\n      });\r\n\r\n      return () => {\r\n        socket.off(\"stream-started\");\r\n        socket.off(\"stream-stopped\");\r\n        socket.off(\"error\");\r\n      };\r\n    }\r\n  }, [socket]);\r\n\r\n  const startStreaming = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      });\r\n      mediaStream.current = stream; // Save media stream reference\r\n      localVideoRef.current.srcObject = stream; // Display local stream in the video element\r\n\r\n      // Emit socket event to signal stream start\r\n      socket.emit(\"start-stream\", { streamId: \"your-stream-id\" });\r\n    } catch (error) {\r\n      console.error(\"Error starting stream:\", error);\r\n    }\r\n  };\r\n\r\n  const startStreamingToJanus = () => {\r\n    if (!mediaStream.current) return; // Ensure media stream is available\r\n\r\n    // Assuming janusInstance is available globally or from context\r\n    janusInstance.attach({\r\n      plugin: \"janus.plugin.rtmp\",\r\n      success: (pluginHandle) => {\r\n        pluginHandle.createOffer({\r\n          media: {\r\n            video: mediaStream.current.getVideoTracks()[0],\r\n            audio: mediaStream.current.getAudioTracks()[0],\r\n          },\r\n          success: (jsep) => {\r\n            pluginHandle.send({\r\n              message: { request: \"publish\", rtmp: \"rtmp://janus:8188/stream\" },\r\n              jsep: jsep, // Send SDP offer to Janus\r\n            });\r\n            setStreaming(true);\r\n          },\r\n          error: (error) => {\r\n            console.error(\"Error creating SDP offer:\", error);\r\n          },\r\n        });\r\n      },\r\n      error: (error) => {\r\n        console.error(\"Error attaching RTMP plugin:\", error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const stopStreaming = () => {\r\n    socket.emit(\"stop-stream\", { streamId: \"your-stream-id\" });\r\n    setStreaming(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"streaming-container\">\r\n      <div className=\"video-wrapper\">\r\n        <video ref={localVideoRef} autoPlay muted className=\"video-feed\" />\r\n        {!connected && <div className=\"overlay\">Connecting...</div>}\r\n      </div>\r\n      <div className=\"control-panel\">\r\n        <h2>Live Stream Control</h2>\r\n        <div className=\"status-indicators\">\r\n          <div className={`status ${connected ? \"connected\" : \"disconnected\"}`}>\r\n            {connected ? \"Connected\" : \"Disconnected\"}\r\n          </div>\r\n          <div className={`status ${streaming ? \"live\" : \"idle\"}`}>\r\n            {streaming ? \"Live\" : \"Idle\"}\r\n          </div>\r\n        </div>\r\n        <div className=\"controls\">\r\n          <button\r\n            onClick={startStreaming}\r\n            disabled={streaming || !isSocketConnected}\r\n            className=\"start-btn\"\r\n          >\r\n            <FaPlay /> Start Streaming\r\n          </button>\r\n          <button\r\n            onClick={stopStreaming}\r\n            disabled={!streaming}\r\n            className=\"stop-btn\"\r\n          >\r\n            <FaStop /> Stop Streaming\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JanusRtmpStreamer;\r\n\r\n// import { useEffect, useRef, useState } from \"react\";\r\n// import \"webrtc-adapter\";\r\n// import Janus from \"janus-gateway\";\r\n// import { FaPlay, FaStop, FaVideo } from \"react-icons/fa\";\r\n\r\n// const JanusRtmpStreamer = () => {\r\n//   const [janus, setJanus] = useState(null);\r\n//   const [rtmpPlugin, setRtmpPlugin] = useState(null);\r\n//   const [streaming, setStreaming] = useState(false);\r\n//   const [connected, setConnected] = useState(false);\r\n//   const [isWsConnected, setIsWsConnected] = useState(false);\r\n//   const localVideoRef = useRef(null);\r\n\r\n//   const ipRef = useRef(null); // Keep WebSocket connection persistent across renders\r\n\r\n//   useEffect(() => {\r\n//     // Initialize WebSocket connection via backend proxy\r\n//     if (!ipRef.current) {\r\n//       ipRef.current = new WebSocket(\"/janus-ws\"); // Use backend proxy here\r\n\r\n//       ipRef.current.onopen = () => {\r\n//         setIsWsConnected(true);\r\n//         console.log(\"WebSocket connected to Janus via backend proxy\");\r\n//       };\r\n\r\n//       ipRef.current.onclose = () => {\r\n//         setIsWsConnected(false);\r\n//         console.log(\"WebSocket closed Janus connection\");\r\n//       };\r\n\r\n//       ipRef.current.onerror = (error) => {\r\n//         console.error(\"WebSocket error with Janus, not even /janus-ws\", error);\r\n//       };\r\n//     }\r\n\r\n//     return () => {\r\n//       if (ipRef.current) {\r\n//         ipRef.current.close(); // Clean up WebSocket connection on component unmount\r\n//       }\r\n//     };\r\n//   }, []); // Run only once\r\n\r\n//   useEffect(() => {\r\n//     // Initialize Janus only if WebSocket connection is established\r\n//     if (isWsConnected) {\r\n//       Janus.init({\r\n//         debug: \"all\",\r\n//         callback: () => {\r\n//           const janusInstance = new Janus({\r\n//             server: \"/janus-ws\",\r\n//             success: () => {\r\n//               attachRtmpPlugin(janusInstance);\r\n//             },\r\n//             error: (error) => {\r\n//               console.error(\"Janus error:\", error);\r\n//             },\r\n//           });\r\n//           setJanus(janusInstance);\r\n//         },\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       if (janus) {\r\n//         janus.destroy();\r\n//       }\r\n//     };\r\n//   }, [isWsConnected]); // Trigger Janus init when WebSocket is connected\r\n\r\n//   const attachRtmpPlugin = (janusInstance) => {\r\n//     janusInstance.attach({\r\n//       plugin: \"janus.plugin.rtmp\",\r\n//       success: (pluginHandle) => {\r\n//         setRtmpPlugin(pluginHandle);\r\n//         console.log(\"RTMP plugin attached!\");\r\n//       },\r\n//       error: (error) => {\r\n//         console.error(\"Error attaching RTMP plugin:\", error);\r\n//       },\r\n//       webrtcState: (on) => {\r\n//         setConnected(on);\r\n//         console.log(\"WebRTC peer connection is \", on ? \"up\" : \"down\");\r\n//       },\r\n//       onmessage: (msg, jsep) => {\r\n//         console.log(\"Message received from RTMP plugin:\", msg);\r\n//       },\r\n//       onlocalstream: (stream) => {\r\n//         localVideoRef.current.srcObject = stream;\r\n//       },\r\n//     });\r\n//   };\r\n\r\n//   const startStreaming = () => {\r\n//     if (!rtmpPlugin) {\r\n//       console.error(\"RTMP plugin not attached.\");\r\n//       return;\r\n//     }\r\n\r\n//     const rtmpUrl = \"rtmp://167.99.44.195:1935/stream\";\r\n//     rtmpPlugin.publish({\r\n//       stream: rtmpUrl,\r\n//       success: () => {\r\n//         console.log(\"Publishing to RTMP successfully!\");\r\n//         setStreaming(true);\r\n//       },\r\n//       error: (error) => {\r\n//         console.error(\"Error publishing to RTMP:\", error);\r\n//       },\r\n//     });\r\n//   };\r\n\r\n//   const stopStreaming = () => {\r\n//     if (rtmpPlugin) {\r\n//       rtmpPlugin.hangup();\r\n//       setStreaming(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"streaming-container\">\r\n//       <div className=\"video-wrapper\">\r\n//         <video ref={localVideoRef} autoPlay muted className=\"video-feed\" />\r\n//         {!connected && <div className=\"overlay\">Connecting...</div>}\r\n//       </div>\r\n//       <div className=\"control-panel\">\r\n//         <h2>Live Stream Control</h2>\r\n//         <div className=\"status-indicators\">\r\n//           <div className={`status ${connected ? \"connected\" : \"disconnected\"}`}>\r\n//             {connected ? \"Connected\" : \"Disconnected\"}\r\n//           </div>\r\n//           <div className={`status ${streaming ? \"live\" : \"idle\"}`}>\r\n//             {streaming ? \"Live\" : \"Idle\"}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"controls\">\r\n//           <button\r\n//             onClick={startStreaming}\r\n//             disabled={streaming}\r\n//             className=\"start-btn\"\r\n//           >\r\n//             <FaPlay /> Start Streaming\r\n//           </button>\r\n//           <button\r\n//             onClick={stopStreaming}\r\n//             disabled={!streaming}\r\n//             className=\"stop-btn\"\r\n//           >\r\n//             <FaStop /> Stop Streaming\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default JanusRtmpStreamer;\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","streaming","setStreaming","_useState3","_useState4","connected","localVideoRef","useRef","socket","useConnectSocket","user","_useState5","_useState6","isSocketConnected","setIsSocketConnected","mediaStream","ws","WebSocket","onopen","console","log","send","JSON","stringify","janus","plugin","onmessage","event","data","parse","onerror","error","onclose","useEffect","on","response","startStreamingToJanus","message","off","startStreaming","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","stream","wrap","_context","prev","next","navigator","mediaDevices","getUserMedia","video","audio","sent","current","srcObject","emit","streamId","t0","stop","apply","arguments","janusInstance","attach","success","pluginHandle","createOffer","media","getVideoTracks","getAudioTracks","jsep","request","rtmp","_jsxs","className","children","_jsx","ref","autoPlay","muted","concat","onClick","disabled","FaPlay","FaStop"],"sourceRoot":""}