{"version":3,"file":"static/js/384.2b47a571.chunk.js","mappings":"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","sources":["components/config/chatlogics.js","pages/StreamViewing.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { z } from \"zod\";\r\n\r\nexport const cn = (...inputs) => {\r\n  return twMerge(clsx(inputs));\r\n};\r\n\r\nexport const UserFormValidation = z.object({\r\n  name: z\r\n    .string()\r\n    .min(2, \"Name must be at least 2 characters\")\r\n    .max(50, \"Name must be at most 50 characters\"),\r\n  otherName: z\r\n    .string()\r\n    .min(2, \"Other name must be at least 2 characters\")\r\n    .max(50, \"Other name must be at most 50 characters\"),\r\n  email: z.string().email(\"Invalid email address\"),\r\n  gender: z.enum([\"male\", \"female\", \"other\"]),\r\n  password: z\r\n    .string()\r\n    .min(4, \"Password must be at least 8 characters long\")\r\n    .max(100, \"Password must be at most 100 characters\"),\r\n  confirmPassword: z\r\n    .string()\r\n    .min(4, \"Confirm password must be at least 8 characters long\")\r\n    .max(100, \"Confirm password must be at most 100 characters\")\r\n    .refine((val, ctx) => val === ctx.parent.password, {\r\n      message: \"Passwords do not match\",\r\n    }),\r\n  passport: z.string().regex(/^\\d{8,15}$/, \"Invalid passport/ID number\"),\r\n  selectedCountry: z.string().min(2, \"Country is required\"),\r\n  provinces: z.string().optional(),\r\n  language: z.string().min(2, \"Language is required\"),\r\n  pic: z.string().url(\"Profile picture is required\"),\r\n});\r\n\r\nexport const isSameSenderMargin = (messages, m, i, userId) => {\r\n  const isCurrentUserSender = m.sender?.$oid === userId;\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender?.$oid === m.sender?.$oid &&\r\n    !isCurrentUserSender\r\n  ) {\r\n    return 33;\r\n  } else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender?.$oid !== m.sender?.$oid &&\r\n      !isCurrentUserSender) ||\r\n    (i === messages.length - 1 && !isCurrentUserSender)\r\n  ) {\r\n    return 0;\r\n  } else {\r\n    return \"auto\";\r\n  }\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1]?.sender?._id !== m.sender?._id ||\r\n      messages[i + 1]?.sender?._id === undefined) &&\r\n    messages[i]?.sender?._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  const lastMessageSenderId = messages[messages.length - 1].sender?.$oid;\r\n  return (\r\n    i === messages.length - 1 &&\r\n    lastMessageSenderId !== userId &&\r\n    lastMessageSenderId\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender?.$oid === m.sender?.$oid;\r\n};\r\n\r\nexport const getSenderName = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n};\r\nexport const getSenderId = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1]._id : users[0]._id;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, user) => {\r\n  return user[0]._id === loggedUser._id ? user[1] : user[0];\r\n};\r\n\r\nexport async function getUserById(userId, token) {\r\n  if (!userId && !token) {\r\n    return;\r\n  }\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.get(`/api/user/getuserid/${userId}`, config);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport function useConnectSocket(user) {\r\n  const [socket, setSocket] = useState(null);\r\n  const socketRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!user || !user.token) {\r\n      return;\r\n    }\r\n\r\n    // Check if the socket already exists\r\n    if (socketRef.current) {\r\n      setSocket(socketRef.current);\r\n      return;\r\n    }\r\n\r\n    const userId = user._id;\r\n    const newSocket = io(\"/\", {\r\n      query: { token: user.token, userId },\r\n    });\r\n\r\n    newSocket.on(\"connect\", () => {\r\n      console.log(\"connected\");\r\n      setSocket(newSocket); // Set socket state after connection\r\n    });\r\n\r\n    newSocket.on(\"disconnect\", (reason) => {\r\n      console.log(\"Socket.IO disconnected due to:\", reason);\r\n      if (reason === \"io server disconnect\") {\r\n        // Handle server-side disconnections\r\n        newSocket.connect();\r\n      }\r\n    });\r\n\r\n    newSocket.on(\"reconnect_attempt\", (attemptNumber) => {\r\n      console.log(`Reconnection attempt ${attemptNumber}`);\r\n    });\r\n\r\n    newSocket.on(\"error\", (error) => {\r\n      console.error(\"Socket.IO error:\", error);\r\n    });\r\n\r\n    // Update socketRef with the new socket instance\r\n    socketRef.current = newSocket;\r\n\r\n    // Clean up function to disconnect socket when the component unmounts\r\n    return () => {\r\n      if (newSocket) {\r\n        newSocket.disconnect();\r\n      }\r\n      socketRef.current = null;\r\n    };\r\n  }, [user]); // Only rerun if user changes\r\n\r\n  return socket;\r\n}\r\n\r\nexport async function makePaymentMpesa(amount, phoneNumber, user, toast) {\r\n  if (!phoneNumber) {\r\n    return;\r\n  }\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.post(\r\n      `/api/paycheck/makepaymentmpesa/${user._id}?amount=${amount}`,\r\n      { phoneNumber },\r\n      config\r\n    );\r\n\r\n    if (data) {\r\n      toast({\r\n        title: \"You have been prompt to finish your subscription process\",\r\n        status: \"info\",\r\n        duration: 1000,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  } catch (error) {}\r\n}\r\n\r\nexport async function donationsMpesa(amount, phoneNumber, toast) {\r\n  if (!phoneNumber) {\r\n    return;\r\n  }\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    };\r\n    const { data } = await axios.post(\r\n      `/api/paycheck/donationsmpesa?amount=${amount}`,\r\n      { phoneNumber },\r\n      config\r\n    );\r\n\r\n    if (data) {\r\n      toast({\r\n        title: \"You have been prompt to finish your subscription process\",\r\n        status: \"info\",\r\n        duration: 1000,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport async function handleApprove(accountType, type, user, setUser) {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.put(\r\n      `/api/paycheck/${user._id}/${type}/${accountType}`,\r\n      {},\r\n      config\r\n    );\r\n\r\n    const userData = await {\r\n      ...user,\r\n      accountType: data.accountType,\r\n      subscription: data.subscription,\r\n      day: data.day,\r\n    };\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(userData));\r\n    setUser(userData);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw new Error(\"Error occurred\", error);\r\n  }\r\n}\r\n","// StreamViewPage.js\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { Box, Text } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../components/Context/ChatProvider\";\r\nimport { useConnectSocket } from \"../components/config/chatlogics\";\r\nimport kurentoUtils from \"kurento-utils\"; // For handling WebRTC signaling\r\n\r\nconst StreamViewPage = () => {\r\n  const [isStreamActive, setIsStreamActive] = useState(false);\r\n  const kurentoPeerRef = useRef(null);\r\n  const videoRef = useRef(null); // Ref for the video element\r\n  const { user } = ChatState();\r\n  const socket = useConnectSocket(user);\r\n  const [isSocketConnected, setIsSocketConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      setIsSocketConnected(socket.connected);\r\n      socket.on(\"connect\", () => setIsSocketConnected(true));\r\n      socket.on(\"disconnect\", () => setIsSocketConnected(false));\r\n    }\r\n  }, [socket]);\r\n\r\n  // Check live stream status and connect to socket\r\n  useEffect(() => {\r\n    if (isSocketConnected) {\r\n      socket.emit(\"checkLiveStream\");\r\n\r\n      socket.on(\"liveStreamStatus\", (status) => {\r\n        setIsStreamActive(status);\r\n        if (status) setupWebRTC();\r\n      });\r\n\r\n      socket.on(\"streamEnded\", () => {\r\n        setIsStreamActive(false);\r\n      });\r\n\r\n      socket.on(\"stopped\", (status) => {\r\n        setIsStreamActive(status);\r\n        if (kurentoPeerRef.current) {\r\n          kurentoPeerRef.current.dispose();\r\n          kurentoPeerRef.current = null;\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        socket.off(\"liveStreamStatus\");\r\n        socket.off(\"stopped\");\r\n        socket.off(\"streamEnded\");\r\n        if (kurentoPeerRef.current) {\r\n          kurentoPeerRef.current.dispose();\r\n          kurentoPeerRef.current = null;\r\n        }\r\n      };\r\n    }\r\n  }, [isSocketConnected]);\r\n\r\n  // Setup WebRTC connection\r\n  const setupWebRTC = () => {\r\n    if (!videoRef.current) return;\r\n\r\n    const options = {\r\n      remoteVideo: videoRef.current,\r\n      onicecandidate: (candidate) => {\r\n        if (candidate) {\r\n          socket.emit(\"onUserIceCandidate\", candidate);\r\n        }\r\n      },\r\n    };\r\n\r\n    const kurentoPeer = kurentoUtils.WebRtcPeer.WebRtcPeerRecvonly(\r\n      options,\r\n      function (error) {\r\n        if (error) return console.error(\"WebRTC peer creation failed:\", error);\r\n\r\n        this.generateOffer((error, offerSdp) => {\r\n          if (error) return console.error(\"Error generating SDP offer:\", error);\r\n\r\n          socket.emit(\"joinStream\", { sdpOffer: offerSdp });\r\n        });\r\n      }\r\n    );\r\n\r\n    kurentoPeerRef.current = kurentoPeer;\r\n\r\n    // SDP Answer and ICE Candidate handlers\r\n    socket.on(\"userSdpAnswer\", ({ sdpAnswer }) => {\r\n      if (kurentoPeerRef.current) {\r\n        kurentoPeerRef.current.processAnswer(sdpAnswer, (error) => {\r\n          if (error) console.error(\"Error processing SDP answer:\", error);\r\n        });\r\n      }\r\n    });\r\n\r\n    socket.on(\"userIceCandidate\", (candidate) => {\r\n      if (kurentoPeerRef.current && candidate) {\r\n        kurentoPeerRef.current.addIceCandidate(candidate, (error) => {\r\n          if (error) console.error(\"Error adding ICE candidate:\", error);\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Loading state\r\n  if (!isStreamActive) {\r\n    return (\r\n      <Box>\r\n        <Text>No live stream is currently active.</Text>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Text>Live Stream</Text>\r\n      <video\r\n        ref={videoRef}\r\n        autoPlay\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"80vh\",\r\n        }}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default StreamViewPage;\r\n"],"names":["UserFormValidation","z","object","name","string","min","max","otherName","email","gender","enum","password","confirmPassword","refine","val","ctx","parent","message","passport","regex","selectedCountry","provinces","optional","language","pic","url","useConnectSocket","user","_useState","useState","_useState2","_slicedToArray","socket","setSocket","socketRef","useRef","useEffect","token","current","userId","_id","newSocket","io","query","on","console","log","reason","connect","attemptNumber","concat","error","disconnect","makePaymentMpesa","_x3","_x4","_x5","_x6","_makePaymentMpesa","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","amount","phoneNumber","toast","config","_yield$axios$post","wrap","_context2","prev","next","abrupt","headers","Authorization","axios","post","sent","data","title","status","duration","position","t0","stop","donationsMpesa","_x7","_x8","_x9","_donationsMpesa","_callee3","_yield$axios$post2","_context3","isStreamActive","setIsStreamActive","kurentoPeerRef","videoRef","ChatState","_useState3","_useState4","isSocketConnected","setIsSocketConnected","connected","emit","setupWebRTC","dispose","off","options","remoteVideo","onicecandidate","candidate","kurentoPeer","kurentoUtils","WebRtcPeerRecvonly","this","generateOffer","offerSdp","sdpOffer","_ref","sdpAnswer","processAnswer","addIceCandidate","_jsxs","Box","children","_jsx","Text","ref","autoPlay","style","width","height"],"sourceRoot":""}