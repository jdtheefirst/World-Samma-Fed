{"version":3,"file":"static/js/42.96af1231.chunk.js","mappings":"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","sources":["pages/LivePage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FaPlay, FaStop } from \"react-icons/fa\";\r\nimport Janus from \"janus-gateway\";\r\n\r\nconst JanusRtmpStreamer = () => {\r\n  const [janus, setJanus] = useState(null);\r\n  const [rtmpPlugin, setRtmpPlugin] = useState(null);\r\n  const [streaming, setStreaming] = useState(false);\r\n  const [connected, setConnected] = useState(false);\r\n  const [isWsConnected, setIsWsConnected] = useState(false);\r\n  const localVideoRef = useRef(null);\r\n  const localStreamRef = useRef(null);\r\n\r\n  const ipRef = useRef(null); // Keep WebSocket connection persistent across renders\r\n  const testSocket = new WebSocket(\"ws://167.99.44.195/ws/\");\r\n  testSocket.onopen = () => console.log(\"WebSocket connected to ip\");\r\n  testSocket.onerror = (err) => console.error(\"WebSocket error ip\", err);\r\n  testSocket.onclose = () => console.log(\"WebSocket closed ip\");\r\n\r\n  const Socket = new WebSocket(\"ws://172.18.0.2:8188\");\r\n  Socket.onopen = () => console.log(\"WebSocket connected to IP 172\");\r\n  Socket.onerror = (err) => console.error(\"WebSocket error on IP 172\", err);\r\n  Socket.onclose = () => console.log(\"WebSocket closed on IP 172\");\r\n\r\n  useEffect(() => {\r\n    // Initialize WebSocket connection via backend proxy\r\n    if (!ipRef.current) {\r\n      ipRef.current = new WebSocket(\"/ws/\"); // Use backend proxy here\r\n\r\n      ipRef.current.onopen = () => {\r\n        setIsWsConnected(true);\r\n        console.log(\"WebSocket connected to Janus\");\r\n      };\r\n\r\n      ipRef.current.onclose = () => {\r\n        setIsWsConnected(false);\r\n        console.log(\"WebSocket closed Janus connection\");\r\n      };\r\n\r\n      ipRef.current.onerror = (error) => {\r\n        console.error(\"WebSocket error\", error);\r\n      };\r\n    }\r\n\r\n    return () => {\r\n      if (ipRef.current) {\r\n        ipRef.current.close(); // Clean up WebSocket connection on component unmount\r\n      }\r\n    };\r\n  }, []); // Run only once\r\n\r\n  useEffect(() => {\r\n    // Initialize Janus only if WebSocket connection is established\r\n    if (isWsConnected) {\r\n      Janus.init({\r\n        debug: \"all\",\r\n        callback: () => {\r\n          const janusInstance = new Janus({\r\n            server: \"/ws/\",\r\n            success: () => {\r\n              attachRtmpPlugin(janusInstance);\r\n            },\r\n            error: (error) => {\r\n              console.error(\"Janus error:\", error);\r\n            },\r\n          });\r\n          setJanus(janusInstance);\r\n        },\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (janus) {\r\n        janus.destroy();\r\n      }\r\n    };\r\n  }, [isWsConnected]); // Trigger Janus init when WebSocket is connected\r\n\r\n  const attachRtmpPlugin = (janusInstance) => {\r\n    janusInstance.attach({\r\n      plugin: \"janus.plugin.rtmp\",\r\n      success: (pluginHandle) => {\r\n        setRtmpPlugin(pluginHandle);\r\n        console.log(\"RTMP plugin attached!\");\r\n        startLocalStream(); // Start capturing local video stream\r\n      },\r\n      error: (error) => {\r\n        console.error(\"Error attaching RTMP plugin:\", error);\r\n      },\r\n      webrtcState: (on) => {\r\n        setConnected(on);\r\n        console.log(\"WebRTC peer connection is \", on ? \"up\" : \"down\");\r\n      },\r\n      onmessage: (msg, jsep) => {\r\n        console.log(\"Message received from RTMP plugin:\", msg);\r\n      },\r\n      onlocalstream: (stream) => {\r\n        localVideoRef.current.srcObject = stream;\r\n      },\r\n    });\r\n  };\r\n\r\n  const startLocalStream = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      });\r\n      localVideoRef.current.srcObject = stream;\r\n      localStreamRef.current = stream;\r\n\r\n      if (rtmpPlugin) {\r\n        rtmpPlugin.createOffer({\r\n          media: { video: true, audio: true, data: false },\r\n          stream: localStreamRef.current,\r\n          success: (jsep) => {\r\n            rtmpPlugin.send({\r\n              message: { request: \"configure\", audio: true, video: true },\r\n              jsep,\r\n            });\r\n          },\r\n          error: (error) => {\r\n            console.error(\"Error creating WebRTC offer:\", error);\r\n          },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error accessing user media:\", error);\r\n    }\r\n  };\r\n\r\n  const startStreaming = () => {\r\n    if (!rtmpPlugin) {\r\n      console.error(\"RTMP plugin not attached.\");\r\n      return;\r\n    }\r\n\r\n    // const rtmpUrl = \"rtmp://167.99.44.195:1935/stream\";\r\n    const rtmpUrl = \"rtmp://nginx/stream\";\r\n    rtmpPlugin.send({\r\n      message: {\r\n        request: \"publish\",\r\n        rtmp_url: rtmpUrl,\r\n      },\r\n      success: () => {\r\n        console.log(\"Publishing to RTMP successfully!\");\r\n        setStreaming(true);\r\n      },\r\n      error: (error) => {\r\n        console.error(\"Error publishing to RTMP:\", error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const stopStreaming = () => {\r\n    if (rtmpPlugin) {\r\n      rtmpPlugin.hangup();\r\n      setStreaming(false);\r\n      if (localStreamRef.current) {\r\n        localStreamRef.current.getTracks().forEach((track) => track.stop()); // Stop all tracks\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"streaming-container\">\r\n      <div className=\"video-wrapper\">\r\n        <video ref={localVideoRef} autoPlay muted className=\"video-feed\" />\r\n        {!connected && <div className=\"overlay\">Connecting...</div>}\r\n      </div>\r\n      <div className=\"control-panel\">\r\n        <h2>Live Stream Control</h2>\r\n        <div className=\"status-indicators\">\r\n          <div className={`status ${connected ? \"connected\" : \"disconnected\"}`}>\r\n            {connected ? \"Connected\" : \"Disconnected\"}\r\n          </div>\r\n          <div className={`status ${streaming ? \"live\" : \"idle\"}`}>\r\n            {streaming ? \"Live\" : \"Idle\"}\r\n          </div>\r\n        </div>\r\n        <div className=\"controls\">\r\n          <button\r\n            onClick={startStreaming}\r\n            disabled={streaming}\r\n            className=\"start-btn\"\r\n          >\r\n            <FaPlay /> Start Streaming\r\n          </button>\r\n          <button\r\n            onClick={stopStreaming}\r\n            disabled={!streaming}\r\n            className=\"stop-btn\"\r\n          >\r\n            <FaStop /> Stop Streaming\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JanusRtmpStreamer;\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","janus","setJanus","_useState3","_useState4","rtmpPlugin","setRtmpPlugin","_useState5","_useState6","streaming","setStreaming","_useState7","_useState8","connected","setConnected","_useState9","_useState10","isWsConnected","setIsWsConnected","localVideoRef","useRef","localStreamRef","ipRef","testSocket","WebSocket","onopen","console","log","onerror","err","error","onclose","Socket","useEffect","current","close","Janus","init","debug","callback","janusInstance","server","success","attachRtmpPlugin","destroy","attach","plugin","pluginHandle","startLocalStream","webrtcState","on","onmessage","msg","jsep","onlocalstream","stream","srcObject","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","navigator","mediaDevices","getUserMedia","video","audio","sent","createOffer","media","data","send","message","request","t0","stop","apply","arguments","_jsxs","className","children","_jsx","ref","autoPlay","muted","concat","onClick","rtmp_url","disabled","FaPlay","hangup","getTracks","forEach","track","FaStop"],"sourceRoot":""}