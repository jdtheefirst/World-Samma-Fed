{"version":3,"file":"static/js/900.da54e135.chunk.js","mappings":"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","sources":["pages/NotFound.js","../node_modules/@chakra-ui/image/src/native-image.tsx","../node_modules/@chakra-ui/image/src/image.tsx","../node_modules/utilities/object-utils/src/omit.ts","../node_modules/@chakra-ui/image/src/use-image.ts","../node_modules/@chakra-ui/layout/src/flex.tsx"],"sourcesContent":["// NotFound.js\r\nimport { Box, Button, Flex, Image, Text } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst NotFound = () => {\r\n  const navigate = useNavigate();\r\n  return (\r\n    <Flex\r\n      display=\"flex\"\r\n      justifyContent={\"center\"}\r\n      alignItems={\"center\"}\r\n      width={\"100%\"}\r\n    >\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection={\"column\"}\r\n        justifyContent={\"space-between\"}\r\n        alignItems={\"center\"}\r\n        backgroundColor={\"Background\"}\r\n        padding={8}\r\n        width={\"98%\"}\r\n      >\r\n        <Image\r\n          src=\"https://res.cloudinary.com/dvc7i8g1a/image/upload/v1696073349/icons8-not-found-64_rxa6yk.png\"\r\n          loading=\"lazy\"\r\n          alt=\"Not Found\"\r\n        />\r\n        <Text fontSize={\"2xl\"}>404 - Page Not Found</Text>\r\n        <Text textAlign={\"center\"}>\r\n          {\" \"}\r\n          The page you are looking for does not exist.\r\n        </Text>\r\n        <Button\r\n          margin={3}\r\n          backgroundColor={\"green.400\"}\r\n          onClick={() => navigate(\"/dashboard\")}\r\n        >\r\n          Return back to my programs.\r\n        </Button>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note ðŸš¨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n"],"names":["navigate","useNavigate","_jsx","Flex","display","justifyContent","alignItems","width","children","_jsxs","Box","flexDirection","backgroundColor","padding","Image","src","loading","alt","Text","fontSize","textAlign","Button","margin","onClick","NativeImage","forwardRef","props","ref","htmlWidth","htmlHeight","rest","_objectWithoutProperties","_excluded","jsx","_objectSpread","height","displayName","fallbackSrc","fallback","srcSet","align","fit","ignoreFallback","crossOrigin","_props$fallbackStrate","fallbackStrategy","referrerPolicy","shouldIgnoreFallbackImage","status","useImage","showFallbackImage","shouldShowFallbackImage","shared","objectFit","objectPosition","object","_step","keysToOmit","arguments","length","undefined","clone","Object","assign","_iterator","_createForOfIteratorHelper","s","n","done","key","value","err","e","f","omit","chakra","img","as","className","onLoad","onError","sizes","_useState","useState","_useState2","_slicedToArray","setStatus","useEffect","imageRef","useRef","load","useCallback","flush","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","direction","justify","wrap","basis","grow","shrink","styles","flexWrap","flexBasis","flexGrow","flexShrink","div","__css"],"sourceRoot":""}