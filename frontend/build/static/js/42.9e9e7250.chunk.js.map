{"version":3,"file":"static/js/42.9e9e7250.chunk.js","mappings":"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","sources":["components/config/chatlogics.js","pages/LivePage.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { z } from \"zod\";\r\n\r\nexport const cn = (...inputs) => {\r\n  return twMerge(clsx(inputs));\r\n};\r\n\r\nexport const UserFormValidation = z.object({\r\n  name: z\r\n    .string()\r\n    .min(2, \"Name must be at least 2 characters\")\r\n    .max(50, \"Name must be at most 50 characters\"),\r\n  otherName: z\r\n    .string()\r\n    .min(2, \"Other name must be at least 2 characters\")\r\n    .max(50, \"Other name must be at most 50 characters\"),\r\n  email: z.string().email(\"Invalid email address\"),\r\n  gender: z.enum([\"male\", \"female\", \"other\"]),\r\n  password: z\r\n    .string()\r\n    .min(4, \"Password must be at least 8 characters long\")\r\n    .max(100, \"Password must be at most 100 characters\"),\r\n  confirmPassword: z\r\n    .string()\r\n    .min(4, \"Confirm password must be at least 8 characters long\")\r\n    .max(100, \"Confirm password must be at most 100 characters\")\r\n    .refine((val, ctx) => val === ctx.parent.password, {\r\n      message: \"Passwords do not match\",\r\n    }),\r\n  passport: z.string().regex(/^\\d{8,15}$/, \"Invalid passport/ID number\"),\r\n  selectedCountry: z.string().min(2, \"Country is required\"),\r\n  provinces: z.string().optional(),\r\n  language: z.string().min(2, \"Language is required\"),\r\n  pic: z.string().url(\"Profile picture is required\"),\r\n});\r\n\r\nexport const isSameSenderMargin = (messages, m, i, userId) => {\r\n  const isCurrentUserSender = m.sender?.$oid === userId;\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender?.$oid === m.sender?.$oid &&\r\n    !isCurrentUserSender\r\n  ) {\r\n    return 33;\r\n  } else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender?.$oid !== m.sender?.$oid &&\r\n      !isCurrentUserSender) ||\r\n    (i === messages.length - 1 && !isCurrentUserSender)\r\n  ) {\r\n    return 0;\r\n  } else {\r\n    return \"auto\";\r\n  }\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1]?.sender?._id !== m.sender?._id ||\r\n      messages[i + 1]?.sender?._id === undefined) &&\r\n    messages[i]?.sender?._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  const lastMessageSenderId = messages[messages.length - 1].sender?.$oid;\r\n  return (\r\n    i === messages.length - 1 &&\r\n    lastMessageSenderId !== userId &&\r\n    lastMessageSenderId\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender?.$oid === m.sender?.$oid;\r\n};\r\n\r\nexport const getSenderName = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n};\r\nexport const getSenderId = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1]._id : users[0]._id;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, user) => {\r\n  return user[0]._id === loggedUser._id ? user[1] : user[0];\r\n};\r\n\r\nexport async function getUserById(userId, token) {\r\n  if (!userId && !token) {\r\n    return;\r\n  }\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.get(`/api/user/getuserid/${userId}`, config);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport function useConnectSocket(user) {\r\n  const [socket, setSocket] = useState(null);\r\n  const socketRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!user || !user.token) {\r\n      return;\r\n    }\r\n\r\n    // Check if the socket already exists\r\n    if (socketRef.current) {\r\n      setSocket(socketRef.current);\r\n      return;\r\n    }\r\n\r\n    const userId = user._id;\r\n    const newSocket = io(\"/\", {\r\n      query: { token: user.token, userId },\r\n    });\r\n\r\n    newSocket.on(\"connect\", () => {\r\n      console.log(\"connected\");\r\n      setSocket(newSocket); // Set socket state after connection\r\n    });\r\n\r\n    newSocket.on(\"disconnect\", (reason) => {\r\n      console.log(\"Socket.IO disconnected due to:\", reason);\r\n      if (reason === \"io server disconnect\") {\r\n        // Handle server-side disconnections\r\n        newSocket.connect();\r\n      }\r\n    });\r\n\r\n    newSocket.on(\"reconnect_attempt\", (attemptNumber) => {\r\n      console.log(`Reconnection attempt ${attemptNumber}`);\r\n    });\r\n\r\n    newSocket.on(\"error\", (error) => {\r\n      console.error(\"Socket.IO error:\", error);\r\n    });\r\n\r\n    // Update socketRef with the new socket instance\r\n    socketRef.current = newSocket;\r\n\r\n    // Clean up function to disconnect socket when the component unmounts\r\n    return () => {\r\n      if (newSocket) {\r\n        newSocket.disconnect();\r\n      }\r\n      socketRef.current = null;\r\n    };\r\n  }, [user]); // Only rerun if user changes\r\n\r\n  return socket;\r\n}\r\n\r\nexport async function makePaymentMpesa(amount, phoneNumber, user, toast) {\r\n  if (!phoneNumber) {\r\n    return;\r\n  }\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.post(\r\n      `/api/paycheck/makepaymentmpesa/${user._id}?amount=${amount}`,\r\n      { phoneNumber },\r\n      config\r\n    );\r\n\r\n    if (data) {\r\n      toast({\r\n        title: \"You have been prompt to finish your subscription process\",\r\n        status: \"info\",\r\n        duration: 1000,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  } catch (error) {}\r\n}\r\n\r\nexport async function donationsMpesa(amount, phoneNumber, toast) {\r\n  if (!phoneNumber) {\r\n    return;\r\n  }\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    };\r\n    const { data } = await axios.post(\r\n      `/api/paycheck/donationsmpesa?amount=${amount}`,\r\n      { phoneNumber },\r\n      config\r\n    );\r\n\r\n    if (data) {\r\n      toast({\r\n        title: \"You have been prompt to finish your subscription process\",\r\n        status: \"info\",\r\n        duration: 1000,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport async function handleApprove(accountType, type, user, setUser) {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.put(\r\n      `/api/paycheck/${user._id}/${type}/${accountType}`,\r\n      {},\r\n      config\r\n    );\r\n\r\n    const userData = await {\r\n      ...user,\r\n      accountType: data.accountType,\r\n      subscription: data.subscription,\r\n      day: data.day,\r\n    };\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(userData));\r\n    setUser(userData);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw new Error(\"Error occurred\", error);\r\n  }\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Box, Text, Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../components/Context/ChatProvider\";\r\nimport { useConnectSocket } from \"../components/config/chatlogics\";\r\nimport kurentoUtils from \"kurento-utils\"; // For handling WebRTC signaling\r\n\r\nconst LivePage = () => {\r\n  const [isStreamActive, setIsStreamActive] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const kurentoPeerRef = useRef(null); // Ref for storing kurentoPeer\r\n  const { user } = ChatState();\r\n  const socket = useConnectSocket(user);\r\n  const [isSocketConnected, setIsSocketConnected] = useState(false);\r\n\r\n  // Check socket connection status\r\n  useEffect(() => {\r\n    if (socket) {\r\n      setIsSocketConnected(socket.connected);\r\n      socket.on(\"connect\", () => setIsSocketConnected(true));\r\n      socket.on(\"disconnect\", () => setIsSocketConnected(false));\r\n    }\r\n  }, [socket]);\r\n\r\n  // Check live stream status\r\n  useEffect(() => {\r\n    if (isSocketConnected) {\r\n      socket.emit(\"checkLiveStream\");\r\n      socket.on(\"liveStreamStatus\", (status) => {\r\n        setIsStreamActive(status);\r\n        setLoading(false);\r\n      });\r\n      socket.on(\"stopped\", (status) => {\r\n        setIsStreamActive(status);\r\n      });\r\n      socket.on(\"streamEnded\", () => {\r\n        setIsStreamActive(false);\r\n      });\r\n      return () => {\r\n        socket.off(\"liveStreamStatus\");\r\n        socket.off(\"stopped\");\r\n        socket.off(\"streamEnded\");\r\n      };\r\n    }\r\n  }, [isSocketConnected]);\r\n\r\n  // Start streaming and setup WebRTC\r\n  const startStreaming = async () => {\r\n    if (isStreamActive) {\r\n      console.log(\"Stream already active. Cannot start another.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Request access to user's media devices\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      });\r\n      console.log(\"Media access granted:\", stream);\r\n\r\n      // Create a new WebRTC peer for Kurento\r\n      const options = {\r\n        localVideo: document.getElementById(\"localVideo\"),\r\n        onicecandidate: (candidate) => {\r\n          // Send ICE candidates to the backend\r\n          socket.emit(\"onIceCandidate\", candidate);\r\n        },\r\n      };\r\n\r\n      // Create the kurentoPeer\r\n      const kurentoPeer = kurentoUtils.WebRtcPeer.WebRtcPeerSendonly(\r\n        options,\r\n        function (error) {\r\n          if (error) return console.error(error);\r\n\r\n          // Generate offer to send to Kurento\r\n          this.generateOffer((error, offerSdp) => {\r\n            if (error) return console.error(error);\r\n\r\n            // Send the offer to the backend via socket\r\n            socket.emit(\"startStream\", { sdpOffer: offerSdp });\r\n          });\r\n        }\r\n      );\r\n\r\n      kurentoPeerRef.current = kurentoPeer; // Store in the ref\r\n\r\n      // Listen for Kurento's answer\r\n      socket.on(\"sdpAnswer\", (sdpAnswer) => {\r\n        console.log(\"Received SDP answer from server:\", sdpAnswer);\r\n        if (kurentoPeerRef.current) {\r\n          kurentoPeerRef.current.processAnswer(sdpAnswer);\r\n        }\r\n      });\r\n\r\n      // Listen for ICE candidates from Kurento\r\n      socket.on(\"adminIceCandidate\", (candidate) => {\r\n        if (kurentoPeerRef.current) {\r\n          kurentoPeerRef.current.addIceCandidate(candidate);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      console.error(\"Error accessing media devices:\", err);\r\n    }\r\n  };\r\n\r\n  const stopStreaming = () => {\r\n    if (kurentoPeerRef.current) {\r\n      kurentoPeerRef.current.dispose(); // Dispose of the WebRTC peer connection\r\n      kurentoPeerRef.current = null; // Clear the stored peer connection\r\n      setIsStreamActive(false); // Update the stream status in the component\r\n      console.log(\"Stream stopped.\");\r\n      socket.emit(\"stop\"); // Notify the backend\r\n\r\n      // Clear Kurento-related socket listeners\r\n      socket.off(\"sdpAnswer\");\r\n      socket.off(\"iceCandidate\");\r\n    }\r\n  };\r\n\r\n  // Cleanup on component unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (kurentoPeerRef.current) {\r\n        stopStreaming();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Loading state\r\n  if (loading) {\r\n    return <Text>Loading...</Text>;\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Text>No live stream active. Start your stream below.</Text>\r\n      <Button\r\n        colorScheme=\"teal\"\r\n        isDisabled={isStreamActive}\r\n        onClick={startStreaming}\r\n      >\r\n        Start Live Stream\r\n      </Button>\r\n      <Button colorScheme=\"red\" onClick={stopStreaming}>\r\n        Stop Live Stream\r\n      </Button>\r\n      <video\r\n        id=\"localVideo\"\r\n        autoPlay\r\n        muted\r\n        style={{\r\n          display: isStreamActive ? \"block\" : \"none\",\r\n          width: \"100%\",\r\n          height: \"80vh\",\r\n        }}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LivePage;\r\n"],"names":["UserFormValidation","z","object","name","string","min","max","otherName","email","gender","enum","password","confirmPassword","refine","val","ctx","parent","message","passport","regex","selectedCountry","provinces","optional","language","pic","url","useConnectSocket","user","_useState","useState","_useState2","_slicedToArray","socket","setSocket","socketRef","useRef","useEffect","token","current","userId","_id","newSocket","io","query","on","console","log","reason","connect","attemptNumber","concat","error","disconnect","makePaymentMpesa","_x3","_x4","_x5","_x6","_makePaymentMpesa","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","amount","phoneNumber","toast","config","_yield$axios$post","wrap","_context2","prev","next","abrupt","headers","Authorization","axios","post","sent","data","title","status","duration","position","t0","stop","donationsMpesa","_x7","_x8","_x9","_donationsMpesa","_callee3","_yield$axios$post2","_context3","isStreamActive","setIsStreamActive","_useState3","_useState4","loading","setLoading","kurentoPeerRef","ChatState","_useState5","_useState6","isSocketConnected","setIsSocketConnected","connected","emit","off","startStreaming","_ref","_callee","stream","options","kurentoPeer","_context","navigator","mediaDevices","getUserMedia","video","audio","localVideo","document","getElementById","onicecandidate","candidate","kurentoUtils","WebRtcPeerSendonly","this","generateOffer","offerSdp","sdpOffer","sdpAnswer","processAnswer","addIceCandidate","stopStreaming","dispose","_jsx","Text","children","_jsxs","Box","Button","colorScheme","isDisabled","onClick","id","autoPlay","muted","style","display","width","height"],"sourceRoot":""}