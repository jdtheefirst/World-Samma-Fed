{"version":3,"file":"static/js/42.c60928b1.chunk.js","mappings":"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","sources":["pages/LivePage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FaPlay, FaStop } from \"react-icons/fa\";\r\nimport Janus from \"janus-gateway-js\";\r\nimport \"../App.css\";\r\nimport \"webrtc-adapter\";\r\n\r\nconst JanusRtmpStreamer = () => {\r\n  const janusRef = useRef(null);\r\n  const [rtmpPlugin, setRtmpPlugin] = useState(null);\r\n  const [streaming, setStreaming] = useState(false);\r\n  const [connected, setConnected] = useState(false);\r\n  const localVideoRef = useRef(null);\r\n  const localStreamRef = useRef(null);\r\n  const wsRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    initializeJanus();\r\n\r\n    return () => {\r\n      cleanUp();\r\n    };\r\n  }, []);\r\n\r\n  const initializeJanus = async () => {\r\n    try {\r\n      const janusInstance = new Janus.Client(\"/ws/\", { keepalive: true });\r\n      janusRef.current = janusInstance;\r\n      janusInstance\r\n        .createConnection(\"id\")\r\n        .then((connection) => {\r\n          connection\r\n            .createSession()\r\n            .then((session) => {\r\n              session\r\n                .attachPlugin(\"janus.plugin.rtmp\")\r\n                .then((plugin) => {\r\n                  console.log(\"RTMP plugin attached!\");\r\n                  setRtmpPlugin(plugin);\r\n                  setConnected(true);\r\n                  attachStream(plugin);\r\n                })\r\n                .catch((err) => {\r\n                  console.error(\"Plugin attach error:\", err);\r\n                });\r\n            })\r\n            .catch((err) => {\r\n              console.error(\"Session creation error:\", err);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Connection creation error:\", err);\r\n        });\r\n    } catch (error) {\r\n      console.error(\"Error initializing Janus:\", error);\r\n    }\r\n  };\r\n\r\n  const attachStream = (plugin) => {\r\n    // Capture the local media stream from the user's camera and microphone\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((stream) => {\r\n        localVideoRef.current.srcObject = stream; // Display the stream in the video element\r\n        localStreamRef.current = stream; // Store the stream in the ref\r\n\r\n        // Send the local stream to Janus for RTMP publishing\r\n        plugin.createOffer({\r\n          media: { video: true, audio: true },\r\n          stream,\r\n          success: (jsep) => {\r\n            plugin.send({\r\n              message: { request: \"configure\", audio: true, video: true },\r\n              jsep,\r\n            });\r\n          },\r\n          error: (error) =>\r\n            console.error(\"Error creating WebRTC offer:\", error),\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error accessing user media:\", error);\r\n      });\r\n\r\n    plugin.on(\"message\", (msg) => {\r\n      console.log(\"Message received from RTMP plugin:\", msg);\r\n    });\r\n\r\n    plugin.on(\"localstream\", (stream) => {\r\n      console.log(\"Local stream attached.\");\r\n      localVideoRef.current.srcObject = stream;\r\n      localStreamRef.current = stream;\r\n    });\r\n\r\n    plugin.on(\"webrtcState\", (on) => {\r\n      console.log(\"WebRTC peer connection is\", on ? \"up\" : \"down\");\r\n    });\r\n  };\r\n\r\n  const startStreaming = () => {\r\n    if (!rtmpPlugin) {\r\n      console.error(\"RTMP plugin not attached.\");\r\n      return;\r\n    }\r\n\r\n    const rtmpUrl = \"/stream\";\r\n    rtmpPlugin.send({\r\n      message: { request: \"publish\", rtmp_url: rtmpUrl },\r\n      success: () => {\r\n        console.log(\"Publishing to RTMP successfully!\");\r\n        setStreaming(true);\r\n      },\r\n      error: (error) => console.error(\"Error publishing to RTMP:\", error),\r\n    });\r\n  };\r\n\r\n  const stopStreaming = () => {\r\n    if (rtmpPlugin) {\r\n      rtmpPlugin.hangup();\r\n      setStreaming(false);\r\n      if (localStreamRef.current) {\r\n        localStreamRef.current.getTracks().forEach((track) => track.stop());\r\n      }\r\n    }\r\n  };\r\n\r\n  const cleanUp = () => {\r\n    // Make sure janusRef.current is the Janus client instance\r\n    if (janusRef.current && typeof janusRef.current.destroy === \"function\") {\r\n      janusRef.current.destroy(); // Clean up Janus instance\r\n      console.log(\"Janus destroyed successfully\");\r\n    } else {\r\n      console.error(\"Janus instance not found or destroy method missing\");\r\n    }\r\n    // Close WebSocket connection if present\r\n    if (wsRef.current) {\r\n      wsRef.current.close();\r\n      console.log(\"WebSocket connection closed\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"streaming-container\">\r\n      <div className=\"video-wrapper\">\r\n        <video ref={localVideoRef} autoPlay muted className=\"video-feed\" />\r\n        {!connected && <div className=\"overlay\">Connecting...</div>}\r\n      </div>\r\n      <div className=\"control-panel\">\r\n        <h2>Live Stream Control</h2>\r\n        <div className=\"status-indicators\">\r\n          <div className={`status ${connected ? \"connected\" : \"disconnected\"}`}>\r\n            {connected ? \"Connected\" : \"Disconnected\"}\r\n          </div>\r\n          <div className={`status ${streaming ? \"live\" : \"idle\"}`}>\r\n            {streaming ? \"Live\" : \"Idle\"}\r\n          </div>\r\n        </div>\r\n        <div className=\"controls\">\r\n          <button\r\n            onClick={startStreaming}\r\n            disabled={streaming || !connected}\r\n            className=\"start-btn\"\r\n          >\r\n            <FaPlay /> Start Streaming\r\n          </button>\r\n          <button\r\n            onClick={stopStreaming}\r\n            disabled={!streaming}\r\n            className=\"stop-btn\"\r\n          >\r\n            <FaStop /> Stop Streaming\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JanusRtmpStreamer;\r\n"],"names":["janusRef","useRef","_useState","useState","_useState2","_slicedToArray","rtmpPlugin","setRtmpPlugin","_useState3","_useState4","streaming","setStreaming","_useState5","_useState6","connected","setConnected","localVideoRef","localStreamRef","wsRef","useEffect","initializeJanus","cleanUp","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","janusInstance","wrap","_context","prev","next","Janus","keepalive","current","createConnection","then","connection","createSession","session","attachPlugin","plugin","console","log","attachStream","catch","err","error","stop","apply","arguments","navigator","mediaDevices","getUserMedia","video","audio","stream","srcObject","createOffer","media","success","jsep","send","message","request","on","msg","destroy","close","_jsxs","className","children","_jsx","ref","autoPlay","muted","concat","onClick","rtmp_url","disabled","FaPlay","hangup","getTracks","forEach","track","FaStop"],"sourceRoot":""}