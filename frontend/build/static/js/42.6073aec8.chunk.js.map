{"version":3,"file":"static/js/42.6073aec8.chunk.js","mappings":"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","sources":["components/config/chatlogics.js","pages/LivePage.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { z } from \"zod\";\r\n\r\nexport const cn = (...inputs) => {\r\n  return twMerge(clsx(inputs));\r\n};\r\n\r\nexport const UserFormValidation = z.object({\r\n  name: z\r\n    .string()\r\n    .min(2, \"Name must be at least 2 characters\")\r\n    .max(50, \"Name must be at most 50 characters\"),\r\n  otherName: z\r\n    .string()\r\n    .min(2, \"Other name must be at least 2 characters\")\r\n    .max(50, \"Other name must be at most 50 characters\"),\r\n  email: z.string().email(\"Invalid email address\"),\r\n  gender: z.enum([\"male\", \"female\", \"other\"]),\r\n  password: z\r\n    .string()\r\n    .min(4, \"Password must be at least 8 characters long\")\r\n    .max(100, \"Password must be at most 100 characters\"),\r\n  confirmPassword: z\r\n    .string()\r\n    .min(4, \"Confirm password must be at least 8 characters long\")\r\n    .max(100, \"Confirm password must be at most 100 characters\")\r\n    .refine((val, ctx) => val === ctx.parent.password, {\r\n      message: \"Passwords do not match\",\r\n    }),\r\n  passport: z.string().regex(/^\\d{8,15}$/, \"Invalid passport/ID number\"),\r\n  selectedCountry: z.string().min(2, \"Country is required\"),\r\n  provinces: z.string().optional(),\r\n  language: z.string().min(2, \"Language is required\"),\r\n  pic: z.string().url(\"Profile picture is required\"),\r\n});\r\n\r\nexport const isSameSenderMargin = (messages, m, i, userId) => {\r\n  const isCurrentUserSender = m.sender?.$oid === userId;\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender?.$oid === m.sender?.$oid &&\r\n    !isCurrentUserSender\r\n  ) {\r\n    return 33;\r\n  } else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender?.$oid !== m.sender?.$oid &&\r\n      !isCurrentUserSender) ||\r\n    (i === messages.length - 1 && !isCurrentUserSender)\r\n  ) {\r\n    return 0;\r\n  } else {\r\n    return \"auto\";\r\n  }\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1]?.sender?._id !== m.sender?._id ||\r\n      messages[i + 1]?.sender?._id === undefined) &&\r\n    messages[i]?.sender?._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  const lastMessageSenderId = messages[messages.length - 1].sender?.$oid;\r\n  return (\r\n    i === messages.length - 1 &&\r\n    lastMessageSenderId !== userId &&\r\n    lastMessageSenderId\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender?.$oid === m.sender?.$oid;\r\n};\r\n\r\nexport const getSenderName = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n};\r\nexport const getSenderId = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1]._id : users[0]._id;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, user) => {\r\n  return user[0]._id === loggedUser._id ? user[1] : user[0];\r\n};\r\n\r\nexport async function getUserById(userId, token) {\r\n  if (!userId && !token) {\r\n    return;\r\n  }\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.get(`/api/user/getuserid/${userId}`, config);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport function useConnectSocket(user) {\r\n  const [socket, setSocket] = useState(null);\r\n  const socketRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!user || !user.token) {\r\n      return;\r\n    }\r\n\r\n    // Check if the socket already exists\r\n    if (socketRef.current) {\r\n      setSocket(socketRef.current);\r\n      return;\r\n    }\r\n\r\n    const userId = user._id;\r\n    const newSocket = io(\"/\", {\r\n      query: { token: user.token, userId },\r\n    });\r\n\r\n    newSocket.on(\"connect\", () => {\r\n      console.log(\"connected\");\r\n      setSocket(newSocket); // Set socket state after connection\r\n    });\r\n\r\n    newSocket.on(\"disconnect\", (reason) => {\r\n      console.log(\"Socket.IO disconnected due to:\", reason);\r\n      if (reason === \"io server disconnect\") {\r\n        // Handle server-side disconnections\r\n        newSocket.connect();\r\n      }\r\n    });\r\n\r\n    newSocket.on(\"reconnect_attempt\", (attemptNumber) => {\r\n      console.log(`Reconnection attempt ${attemptNumber}`);\r\n    });\r\n\r\n    newSocket.on(\"error\", (error) => {\r\n      console.error(\"Socket.IO error:\", error);\r\n    });\r\n\r\n    // Update socketRef with the new socket instance\r\n    socketRef.current = newSocket;\r\n\r\n    // Clean up function to disconnect socket when the component unmounts\r\n    return () => {\r\n      if (newSocket) {\r\n        newSocket.disconnect();\r\n      }\r\n      socketRef.current = null;\r\n    };\r\n  }, [user]); // Only rerun if user changes\r\n\r\n  return socket;\r\n}\r\n\r\nexport async function makePaymentMpesa(amount, phoneNumber, user, toast) {\r\n  if (!phoneNumber) {\r\n    return;\r\n  }\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.post(\r\n      `/api/paycheck/makepaymentmpesa/${user._id}?amount=${amount}`,\r\n      { phoneNumber },\r\n      config\r\n    );\r\n\r\n    if (data) {\r\n      toast({\r\n        title: \"You have been prompt to finish your subscription process\",\r\n        status: \"info\",\r\n        duration: 1000,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  } catch (error) {}\r\n}\r\n\r\nexport async function donationsMpesa(amount, phoneNumber, toast) {\r\n  if (!phoneNumber) {\r\n    return;\r\n  }\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    };\r\n    const { data } = await axios.post(\r\n      `/api/paycheck/donationsmpesa?amount=${amount}`,\r\n      { phoneNumber },\r\n      config\r\n    );\r\n\r\n    if (data) {\r\n      toast({\r\n        title: \"You have been prompt to finish your subscription process\",\r\n        status: \"info\",\r\n        duration: 1000,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport async function handleApprove(accountType, type, user, setUser) {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.put(\r\n      `/api/paycheck/${user._id}/${type}/${accountType}`,\r\n      {},\r\n      config\r\n    );\r\n\r\n    const userData = await {\r\n      ...user,\r\n      accountType: data.accountType,\r\n      subscription: data.subscription,\r\n      day: data.day,\r\n    };\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(userData));\r\n    setUser(userData);\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw new Error(\"Error occurred\", error);\r\n  }\r\n}\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport \"webrtc-adapter\";\r\nimport { FaPlay, FaStop, FaVideo } from \"react-icons/fa\";\r\nimport { useConnectSocket } from \"../components/config/chatlogics\";\r\nimport { ChatState } from \"../components/Context/ChatProvider\";\r\n\r\nconst JanusRtmpStreamer = () => {\r\n  const [streaming, setStreaming] = useState(false);\r\n  const [connected, setConnected] = useState(false);\r\n  const localVideoRef = useRef(null);\r\n  const { user } = ChatState();\r\n  const socket = useConnectSocket(user);\r\n  const [isSocketConnected, setIsSocketConnected] = useState(false);\r\n  const mediaStream = useRef(null); // Hold media stream reference\r\n\r\n  const ws = new WebSocket(\"ws://167.99.44.195:8188\"); // WebSocket URL of your Janus server\r\n\r\n  ws.onopen = () => {\r\n    console.log(\"Connected to Janus WebSocket server\");\r\n    // Send a message to Janus to initialize\r\n    socket.send(\r\n      JSON.stringify({ janus: \"attach\", plugin: \"janus.plugin.rtmp\" })\r\n    );\r\n  };\r\n\r\n  ws.onmessage = (event) => {\r\n    const data = JSON.parse(event.data);\r\n    console.log(\"Received message from Janus:\", data);\r\n    // Handle the Janus responses (such as connection success, etc.)\r\n  };\r\n\r\n  ws.onerror = (error) => {\r\n    console.error(\"WebSocket error:\", error);\r\n  };\r\n\r\n  ws.onclose = () => {\r\n    console.log(\"WebSocket connection closed\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Setup socket connection\r\n    if (socket) {\r\n      setIsSocketConnected(socket.connected);\r\n      socket.on(\"connect\", () => setIsSocketConnected(true));\r\n      socket.on(\"disconnect\", () => setIsSocketConnected(false));\r\n\r\n      socket.on(\"stream-started\", (response) => {\r\n        console.log(\"Streaming started:\", response);\r\n        startStreamingToJanus(); // Begin media streaming to Janus\r\n      });\r\n\r\n      socket.on(\"stream-stopped\", () => {\r\n        console.log(\"Streaming stopped\");\r\n        setStreaming(false);\r\n      });\r\n\r\n      socket.on(\"error\", (message) => {\r\n        console.error(\"Socket.IO error:\", message);\r\n      });\r\n\r\n      return () => {\r\n        socket.off(\"stream-started\");\r\n        socket.off(\"stream-stopped\");\r\n        socket.off(\"error\");\r\n      };\r\n    }\r\n  }, [socket]);\r\n\r\n  const startStreaming = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      });\r\n      mediaStream.current = stream; // Save media stream reference\r\n      localVideoRef.current.srcObject = stream; // Display local stream in the video element\r\n\r\n      // Emit socket event to signal stream start\r\n      socket.emit(\"start-stream\", { streamId: \"your-stream-id\" });\r\n    } catch (error) {\r\n      console.error(\"Error starting stream:\", error);\r\n    }\r\n  };\r\n\r\n  const startStreamingToJanus = () => {\r\n    if (!mediaStream.current) return; // Ensure media stream is available\r\n\r\n    // Assuming janusInstance is available globally or from context\r\n    janusInstance.attach({\r\n      plugin: \"janus.plugin.rtmp\",\r\n      success: (pluginHandle) => {\r\n        pluginHandle.createOffer({\r\n          media: {\r\n            video: mediaStream.current.getVideoTracks()[0],\r\n            audio: mediaStream.current.getAudioTracks()[0],\r\n          },\r\n          success: (jsep) => {\r\n            pluginHandle.send({\r\n              message: { request: \"publish\", rtmp: \"rtmp://janus:8188/stream\" },\r\n              jsep: jsep, // Send SDP offer to Janus\r\n            });\r\n            setStreaming(true);\r\n          },\r\n          error: (error) => {\r\n            console.error(\"Error creating SDP offer:\", error);\r\n          },\r\n        });\r\n      },\r\n      error: (error) => {\r\n        console.error(\"Error attaching RTMP plugin:\", error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const stopStreaming = () => {\r\n    socket.emit(\"stop-stream\", { streamId: \"your-stream-id\" });\r\n    setStreaming(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"streaming-container\">\r\n      <div className=\"video-wrapper\">\r\n        <video ref={localVideoRef} autoPlay muted className=\"video-feed\" />\r\n        {!connected && <div className=\"overlay\">Connecting...</div>}\r\n      </div>\r\n      <div className=\"control-panel\">\r\n        <h2>Live Stream Control</h2>\r\n        <div className=\"status-indicators\">\r\n          <div className={`status ${connected ? \"connected\" : \"disconnected\"}`}>\r\n            {connected ? \"Connected\" : \"Disconnected\"}\r\n          </div>\r\n          <div className={`status ${streaming ? \"live\" : \"idle\"}`}>\r\n            {streaming ? \"Live\" : \"Idle\"}\r\n          </div>\r\n        </div>\r\n        <div className=\"controls\">\r\n          <button\r\n            onClick={startStreaming}\r\n            disabled={streaming || !isSocketConnected}\r\n            className=\"start-btn\"\r\n          >\r\n            <FaPlay /> Start Streaming\r\n          </button>\r\n          <button\r\n            onClick={stopStreaming}\r\n            disabled={!streaming}\r\n            className=\"stop-btn\"\r\n          >\r\n            <FaStop /> Stop Streaming\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JanusRtmpStreamer;\r\n\r\n// import { useEffect, useRef, useState } from \"react\";\r\n// import \"webrtc-adapter\";\r\n// import Janus from \"janus-gateway\";\r\n// import { FaPlay, FaStop, FaVideo } from \"react-icons/fa\";\r\n\r\n// const JanusRtmpStreamer = () => {\r\n//   const [janus, setJanus] = useState(null);\r\n//   const [rtmpPlugin, setRtmpPlugin] = useState(null);\r\n//   const [streaming, setStreaming] = useState(false);\r\n//   const [connected, setConnected] = useState(false);\r\n//   const [isWsConnected, setIsWsConnected] = useState(false);\r\n//   const localVideoRef = useRef(null);\r\n\r\n//   const ipRef = useRef(null); // Keep WebSocket connection persistent across renders\r\n\r\n//   useEffect(() => {\r\n//     // Initialize WebSocket connection via backend proxy\r\n//     if (!ipRef.current) {\r\n//       ipRef.current = new WebSocket(\"/janus-ws\"); // Use backend proxy here\r\n\r\n//       ipRef.current.onopen = () => {\r\n//         setIsWsConnected(true);\r\n//         console.log(\"WebSocket connected to Janus via backend proxy\");\r\n//       };\r\n\r\n//       ipRef.current.onclose = () => {\r\n//         setIsWsConnected(false);\r\n//         console.log(\"WebSocket closed Janus connection\");\r\n//       };\r\n\r\n//       ipRef.current.onerror = (error) => {\r\n//         console.error(\"WebSocket error with Janus, not even /janus-ws\", error);\r\n//       };\r\n//     }\r\n\r\n//     return () => {\r\n//       if (ipRef.current) {\r\n//         ipRef.current.close(); // Clean up WebSocket connection on component unmount\r\n//       }\r\n//     };\r\n//   }, []); // Run only once\r\n\r\n//   useEffect(() => {\r\n//     // Initialize Janus only if WebSocket connection is established\r\n//     if (isWsConnected) {\r\n//       Janus.init({\r\n//         debug: \"all\",\r\n//         callback: () => {\r\n//           const janusInstance = new Janus({\r\n//             server: \"/janus-ws\",\r\n//             success: () => {\r\n//               attachRtmpPlugin(janusInstance);\r\n//             },\r\n//             error: (error) => {\r\n//               console.error(\"Janus error:\", error);\r\n//             },\r\n//           });\r\n//           setJanus(janusInstance);\r\n//         },\r\n//       });\r\n//     }\r\n\r\n//     return () => {\r\n//       if (janus) {\r\n//         janus.destroy();\r\n//       }\r\n//     };\r\n//   }, [isWsConnected]); // Trigger Janus init when WebSocket is connected\r\n\r\n//   const attachRtmpPlugin = (janusInstance) => {\r\n//     janusInstance.attach({\r\n//       plugin: \"janus.plugin.rtmp\",\r\n//       success: (pluginHandle) => {\r\n//         setRtmpPlugin(pluginHandle);\r\n//         console.log(\"RTMP plugin attached!\");\r\n//       },\r\n//       error: (error) => {\r\n//         console.error(\"Error attaching RTMP plugin:\", error);\r\n//       },\r\n//       webrtcState: (on) => {\r\n//         setConnected(on);\r\n//         console.log(\"WebRTC peer connection is \", on ? \"up\" : \"down\");\r\n//       },\r\n//       onmessage: (msg, jsep) => {\r\n//         console.log(\"Message received from RTMP plugin:\", msg);\r\n//       },\r\n//       onlocalstream: (stream) => {\r\n//         localVideoRef.current.srcObject = stream;\r\n//       },\r\n//     });\r\n//   };\r\n\r\n//   const startStreaming = () => {\r\n//     if (!rtmpPlugin) {\r\n//       console.error(\"RTMP plugin not attached.\");\r\n//       return;\r\n//     }\r\n\r\n//     const rtmpUrl = \"rtmp://167.99.44.195:1935/stream\";\r\n//     rtmpPlugin.publish({\r\n//       stream: rtmpUrl,\r\n//       success: () => {\r\n//         console.log(\"Publishing to RTMP successfully!\");\r\n//         setStreaming(true);\r\n//       },\r\n//       error: (error) => {\r\n//         console.error(\"Error publishing to RTMP:\", error);\r\n//       },\r\n//     });\r\n//   };\r\n\r\n//   const stopStreaming = () => {\r\n//     if (rtmpPlugin) {\r\n//       rtmpPlugin.hangup();\r\n//       setStreaming(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"streaming-container\">\r\n//       <div className=\"video-wrapper\">\r\n//         <video ref={localVideoRef} autoPlay muted className=\"video-feed\" />\r\n//         {!connected && <div className=\"overlay\">Connecting...</div>}\r\n//       </div>\r\n//       <div className=\"control-panel\">\r\n//         <h2>Live Stream Control</h2>\r\n//         <div className=\"status-indicators\">\r\n//           <div className={`status ${connected ? \"connected\" : \"disconnected\"}`}>\r\n//             {connected ? \"Connected\" : \"Disconnected\"}\r\n//           </div>\r\n//           <div className={`status ${streaming ? \"live\" : \"idle\"}`}>\r\n//             {streaming ? \"Live\" : \"Idle\"}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"controls\">\r\n//           <button\r\n//             onClick={startStreaming}\r\n//             disabled={streaming}\r\n//             className=\"start-btn\"\r\n//           >\r\n//             <FaPlay /> Start Streaming\r\n//           </button>\r\n//           <button\r\n//             onClick={stopStreaming}\r\n//             disabled={!streaming}\r\n//             className=\"stop-btn\"\r\n//           >\r\n//             <FaStop /> Stop Streaming\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default JanusRtmpStreamer;\r\n"],"names":["UserFormValidation","z","object","name","string","min","max","otherName","email","gender","enum","password","confirmPassword","refine","val","ctx","parent","message","passport","regex","selectedCountry","provinces","optional","language","pic","url","useConnectSocket","user","_useState","useState","_useState2","_slicedToArray","socket","setSocket","socketRef","useRef","useEffect","token","current","userId","_id","newSocket","io","query","on","console","log","reason","connect","attemptNumber","concat","error","disconnect","makePaymentMpesa","_x3","_x4","_x5","_x6","_makePaymentMpesa","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","amount","phoneNumber","toast","config","_yield$axios$post","wrap","_context2","prev","next","abrupt","headers","Authorization","axios","post","sent","data","title","status","duration","position","t0","stop","donationsMpesa","_x7","_x8","_x9","_donationsMpesa","_callee3","_yield$axios$post2","_context3","streaming","setStreaming","_useState3","_useState4","connected","localVideoRef","ChatState","_useState5","_useState6","isSocketConnected","setIsSocketConnected","mediaStream","ws","WebSocket","onopen","send","JSON","stringify","janus","plugin","onmessage","event","parse","onerror","onclose","response","startStreamingToJanus","off","startStreaming","_ref","_callee","stream","_context","navigator","mediaDevices","getUserMedia","video","audio","srcObject","emit","streamId","janusInstance","attach","success","pluginHandle","createOffer","media","getVideoTracks","getAudioTracks","jsep","request","rtmp","_jsxs","className","children","_jsx","ref","autoPlay","muted","onClick","disabled","FaPlay","FaStop"],"sourceRoot":""}